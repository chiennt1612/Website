<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AdvImg" xml:space="preserve">
    <value>Banner image</value>
  </data>
  <data name="AdvScript" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="CateCode" xml:space="preserve">
    <value>Category code</value>
  </data>
  <data name="CategoryImage" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="CateMain" xml:space="preserve">
    <value>Category name main</value>
  </data>
  <data name="CateName" xml:space="preserve">
    <value>Category name</value>
  </data>
  <data name="CateParent" xml:space="preserve">
    <value>Category parent</value>
  </data>
  <data name="CateRefer" xml:space="preserve">
    <value>Category name referenct</value>
  </data>
  <data name="CompanyLogo" xml:space="preserve">
    <value>Logo</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Company name</value>
  </data>
  <data name="CompanySince" xml:space="preserve">
    <value>Since</value>
  </data>
  <data name="CustomerName" xml:space="preserve">
    <value>Customer Name</value>
  </data>
  <data name="DateCreator" xml:space="preserve">
    <value>Date creator</value>
  </data>
  <data name="DateDeleted" xml:space="preserve">
    <value>Date delete</value>
  </data>
  <data name="DateModify" xml:space="preserve">
    <value>Date modify</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="Display" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="DisplayOnHome" xml:space="preserve">
    <value>Display on homepage</value>
  </data>
  <data name="DisplayOnMenuLeft" xml:space="preserve">
    <value>Hiển thị menu trái</value>
  </data>
  <data name="DisplayOnMenuMain" xml:space="preserve">
    <value>Display on footer menu</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="EVNCode" xml:space="preserve">
    <value>EVN Code</value>
  </data>
  <data name="Fullname" xml:space="preserve">
    <value>Fullname</value>
  </data>
  <data name="GroupIdList" xml:space="preserve">
    <value>Customer group list</value>
  </data>
  <data name="Hotline" xml:space="preserve">
    <value>Hotline</value>
  </data>
  <data name="Img" xml:space="preserve">
    <value>Thumbnail</value>
  </data>
  <data name="ImgBanner" xml:space="preserve">
    <value>Banner</value>
  </data>
  <data name="IsHot" xml:space="preserve">
    <value>IsHot</value>
  </data>
  <data name="IsNews" xml:space="preserve">
    <value>Is new?</value>
  </data>
  <data name="IsSale" xml:space="preserve">
    <value>IsSale</value>
  </data>
  <data name="Keyword" xml:space="preserve">
    <value>Keyword</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="MaxPrice" xml:space="preserve">
    <value>Max Price</value>
  </data>
  <data name="MetaBox" xml:space="preserve">
    <value>Meta data box</value>
  </data>
  <data name="MetaDescription" xml:space="preserve">
    <value>Meta data description</value>
  </data>
  <data name="MetaKeyword" xml:space="preserve">
    <value>Meta data keyword</value>
  </data>
  <data name="MetaRobotTag" xml:space="preserve">
    <value>Meta data robot tags</value>
  </data>
  <data name="MetaTitle" xml:space="preserve">
    <value>Meta data title</value>
  </data>
  <data name="MinPrice" xml:space="preserve">
    <value>Min Price</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NewsCategories" xml:space="preserve">
    <value>News category</value>
  </data>
  <data name="OrderDate" xml:space="preserve">
    <value>Date order</value>
  </data>
  <data name="OTP" xml:space="preserve">
    <value>OTP</value>
  </data>
  <data name="ParamKey" xml:space="preserve">
    <value>Param key</value>
  </data>
  <data name="ParamValue" xml:space="preserve">
    <value>Param value</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="Price1" xml:space="preserve">
    <value>Price for person</value>
  </data>
  <data name="Price2" xml:space="preserve">
    <value>Price for company</value>
  </data>
  <data name="PriceText" xml:space="preserve">
    <value>Price remarks</value>
  </data>
  <data name="ProductCode" xml:space="preserve">
    <value>Product code</value>
  </data>
  <data name="ProductImage" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="ProductName" xml:space="preserve">
    <value>Product name</value>
  </data>
  <data name="ProductSlide1" xml:space="preserve">
    <value>Slide 1</value>
  </data>
  <data name="ProductSlide2" xml:space="preserve">
    <value>Slide 2</value>
  </data>
  <data name="ProductSlide3" xml:space="preserve">
    <value>Slide 3</value>
  </data>
  <data name="ProductSlide4" xml:space="preserve">
    <value>Slide 4</value>
  </data>
  <data name="ProductSlide5" xml:space="preserve">
    <value>Slide 5</value>
  </data>
  <data name="Publisher" xml:space="preserve">
    <value>Publisher</value>
  </data>
  <data name="Quota" xml:space="preserve">
    <value>Quota</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="ServiceImage" xml:space="preserve">
    <value>Service Image</value>
  </data>
  <data name="ServiceName" xml:space="preserve">
    <value>Service Name</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Display?</value>
  </data>
  <data name="StringLengthTooLong" xml:space="preserve">
    <value>String is too long, Maxlength is {0}</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="TagsRefer" xml:space="preserve">
    <value>List tags</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="UrlAddress" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="UrlText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="UserCreator" xml:space="preserve">
    <value>User creator</value>
  </data>
  <data name="UserDeleted" xml:space="preserve">
    <value>User delete</value>
  </data>
  <data name="UserModify" xml:space="preserve">
    <value>User modify</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
</root>